# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum EnumResourceResourceType {
  Article
  Podcast
  Video
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type Keyword {
  childId(orderBy: [KeywordOrderByInput!], skip: Float, take: Float, where: KeywordWhereInput): [Keyword!]!
  createdAt: DateTime!
  id: String!
  name: String!
  parentId: Keyword
  resourceId(orderBy: [ResourceOrderByInput!], skip: Float, take: Float, where: ResourceWhereInput): [Resource!]!
  synonymId(orderBy: [SynonymOrderByInput!], skip: Float, take: Float, where: SynonymWhereInput): [Synonym!]!
  updatedAt: DateTime!
  userId(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

input KeywordCreateInput {
  childID: KeywordCreateNestedManyWithoutKeywordsInput
  name: String!
  parentID: KeywordWhereUniqueInput
  resourceID: ResourceCreateNestedManyWithoutKeywordsInput
  synonymID: SynonymCreateNestedManyWithoutKeywordsInput
  userID: UserCreateNestedManyWithoutKeywordsInput
}

input KeywordCreateNestedManyWithoutKeywordsInput {
  connect: [KeywordWhereUniqueInput!]
}

input KeywordCreateNestedManyWithoutResourcesInput {
  connect: [KeywordWhereUniqueInput!]
}

input KeywordCreateNestedManyWithoutUsersInput {
  connect: [KeywordWhereUniqueInput!]
}

input KeywordListRelationFilter {
  every: KeywordWhereInput
  none: KeywordWhereInput
  some: KeywordWhereInput
}

input KeywordOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  parentIDId: SortOrder
  updatedAt: SortOrder
}

input KeywordUpdateInput {
  childID: KeywordUpdateManyWithoutKeywordsInput
  name: String
  parentID: KeywordWhereUniqueInput
  resourceID: ResourceUpdateManyWithoutKeywordsInput
  synonymID: SynonymUpdateManyWithoutKeywordsInput
  userID: UserUpdateManyWithoutKeywordsInput
}

input KeywordUpdateManyWithoutKeywordsInput {
  connect: [KeywordWhereUniqueInput!]
  disconnect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
}

input KeywordUpdateManyWithoutResourcesInput {
  connect: [KeywordWhereUniqueInput!]
  disconnect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
}

input KeywordUpdateManyWithoutUsersInput {
  connect: [KeywordWhereUniqueInput!]
  disconnect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
}

input KeywordWhereInput {
  childID: KeywordListRelationFilter
  id: StringFilter
  name: StringFilter
  parentID: KeywordWhereUniqueInput
  resourceID: ResourceListRelationFilter
  synonymID: SynonymListRelationFilter
  userID: UserListRelationFilter
}

input KeywordWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createKeyword(data: KeywordCreateInput!): Keyword!
  createResource(data: ResourceCreateInput!): Resource!
  createResourceHistory(data: ResourceHistoryCreateInput!): ResourceHistory!
  createResourceSuggestion(data: ResourceSuggestionCreateInput!): ResourceSuggestion!
  createSynonym(data: SynonymCreateInput!): Synonym!
  createUser(data: UserCreateInput!): User!
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword!
  deleteResource(where: ResourceWhereUniqueInput!): Resource!
  deleteResourceHistory(where: ResourceHistoryWhereUniqueInput!): ResourceHistory!
  deleteResourceSuggestion(where: ResourceSuggestionWhereUniqueInput!): ResourceSuggestion!
  deleteSynonym(where: SynonymWhereUniqueInput!): Synonym!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateKeyword(data: KeywordUpdateInput!, where: KeywordWhereUniqueInput!): Keyword!
  updateResource(data: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): Resource!
  updateResourceHistory(data: ResourceHistoryUpdateInput!, where: ResourceHistoryWhereUniqueInput!): ResourceHistory!
  updateResourceSuggestion(data: ResourceSuggestionUpdateInput!, where: ResourceSuggestionWhereUniqueInput!): ResourceSuggestion!
  updateSynonym(data: SynonymUpdateInput!, where: SynonymWhereUniqueInput!): Synonym!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _keywordsMeta(orderBy: [KeywordOrderByInput!], skip: Float, take: Float, where: KeywordWhereInput): MetaQueryPayload!
  _resourceHistoriesMeta(orderBy: [ResourceHistoryOrderByInput!], skip: Float, take: Float, where: ResourceHistoryWhereInput): MetaQueryPayload!
  _resourceSuggestionsMeta(orderBy: [ResourceSuggestionOrderByInput!], skip: Float, take: Float, where: ResourceSuggestionWhereInput): MetaQueryPayload!
  _resourcesMeta(orderBy: [ResourceOrderByInput!], skip: Float, take: Float, where: ResourceWhereInput): MetaQueryPayload!
  _synonymsMeta(orderBy: [SynonymOrderByInput!], skip: Float, take: Float, where: SynonymWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywords(orderBy: [KeywordOrderByInput!], skip: Float, take: Float, where: KeywordWhereInput): [Keyword!]!
  resource(where: ResourceWhereUniqueInput!): Resource
  resourceHistories(orderBy: [ResourceHistoryOrderByInput!], skip: Float, take: Float, where: ResourceHistoryWhereInput): [ResourceHistory!]!
  resourceHistory(where: ResourceHistoryWhereUniqueInput!): ResourceHistory
  resourceSuggestion(where: ResourceSuggestionWhereUniqueInput!): ResourceSuggestion
  resourceSuggestions(orderBy: [ResourceSuggestionOrderByInput!], skip: Float, take: Float, where: ResourceSuggestionWhereInput): [ResourceSuggestion!]!
  resources(orderBy: [ResourceOrderByInput!], skip: Float, take: Float, where: ResourceWhereInput): [Resource!]!
  synonym(where: SynonymWhereUniqueInput!): Synonym
  synonyms(orderBy: [SynonymOrderByInput!], skip: Float, take: Float, where: SynonymWhereInput): [Synonym!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

type Resource {
  abstract: String!
  authors: JSONObject!
  createdAt: DateTime!
  historyId(orderBy: [ResourceHistoryOrderByInput!], skip: Float, take: Float, where: ResourceHistoryWhereInput): [ResourceHistory!]!
  id: String!
  imageURL: String
  keywordId(orderBy: [KeywordOrderByInput!], skip: Float, take: Float, where: KeywordWhereInput): [Keyword!]!
  link: String!
  relaseDate: DateTime!
  resourceType: EnumResourceResourceType
  suggestionId(orderBy: [ResourceSuggestionOrderByInput!], skip: Float, take: Float, where: ResourceSuggestionWhereInput): [ResourceSuggestion!]!
  title: String!
  updatedAt: DateTime!
}

input ResourceCreateInput {
  abstract: String!
  authors: JSONObject!
  historyID: ResourceHistoryCreateNestedManyWithoutResourcesInput
  imageURL: String
  keywordID: KeywordCreateNestedManyWithoutResourcesInput
  link: String!
  relaseDate: DateTime!
  resourceType: EnumResourceResourceType!
  suggestionID: ResourceSuggestionCreateNestedManyWithoutResourcesInput
  title: String!
}

input ResourceCreateNestedManyWithoutKeywordsInput {
  connect: [ResourceWhereUniqueInput!]
}

type ResourceHistory {
  createdAt: DateTime!
  id: String!
  readDate: DateTime
  sourceId: Resource
  updatedAt: DateTime!
  userId: User
}

input ResourceHistoryCreateInput {
  readDate: DateTime
  sourceID: ResourceWhereUniqueInput!
  userID: UserWhereUniqueInput!
}

input ResourceHistoryCreateNestedManyWithoutResourcesInput {
  connect: [ResourceHistoryWhereUniqueInput!]
}

input ResourceHistoryCreateNestedManyWithoutUsersInput {
  connect: [ResourceHistoryWhereUniqueInput!]
}

input ResourceHistoryListRelationFilter {
  every: ResourceHistoryWhereInput
  none: ResourceHistoryWhereInput
  some: ResourceHistoryWhereInput
}

input ResourceHistoryOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  readDate: SortOrder
  sourceIDId: SortOrder
  updatedAt: SortOrder
  userIDId: SortOrder
}

input ResourceHistoryUpdateInput {
  readDate: DateTime
  sourceID: ResourceWhereUniqueInput
  userID: UserWhereUniqueInput
}

input ResourceHistoryUpdateManyWithoutResourcesInput {
  connect: [ResourceHistoryWhereUniqueInput!]
  disconnect: [ResourceHistoryWhereUniqueInput!]
  set: [ResourceHistoryWhereUniqueInput!]
}

input ResourceHistoryUpdateManyWithoutUsersInput {
  connect: [ResourceHistoryWhereUniqueInput!]
  disconnect: [ResourceHistoryWhereUniqueInput!]
  set: [ResourceHistoryWhereUniqueInput!]
}

input ResourceHistoryWhereInput {
  id: StringFilter
  readDate: DateTimeNullableFilter
  sourceID: ResourceWhereUniqueInput
  userID: UserWhereUniqueInput
}

input ResourceHistoryWhereUniqueInput {
  id: String!
}

input ResourceListRelationFilter {
  every: ResourceWhereInput
  none: ResourceWhereInput
  some: ResourceWhereInput
}

input ResourceOrderByInput {
  abstract: SortOrder
  authors: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageURL: SortOrder
  link: SortOrder
  relaseDate: SortOrder
  resourceType: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type ResourceSuggestion {
  createdAt: DateTime!
  id: String!
  priority: Float!
  resourceId: Resource
  updatedAt: DateTime!
  userId: User
}

input ResourceSuggestionCreateInput {
  ResourceID: ResourceWhereUniqueInput!
  priority: Float!
  userID: UserWhereUniqueInput!
}

input ResourceSuggestionCreateNestedManyWithoutResourcesInput {
  connect: [ResourceSuggestionWhereUniqueInput!]
}

input ResourceSuggestionCreateNestedManyWithoutUsersInput {
  connect: [ResourceSuggestionWhereUniqueInput!]
}

input ResourceSuggestionListRelationFilter {
  every: ResourceSuggestionWhereInput
  none: ResourceSuggestionWhereInput
  some: ResourceSuggestionWhereInput
}

input ResourceSuggestionOrderByInput {
  ResourceIDId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  priority: SortOrder
  updatedAt: SortOrder
  userIDId: SortOrder
}

input ResourceSuggestionUpdateInput {
  ResourceID: ResourceWhereUniqueInput
  priority: Float
  userID: UserWhereUniqueInput
}

input ResourceSuggestionUpdateManyWithoutResourcesInput {
  connect: [ResourceSuggestionWhereUniqueInput!]
  disconnect: [ResourceSuggestionWhereUniqueInput!]
  set: [ResourceSuggestionWhereUniqueInput!]
}

input ResourceSuggestionUpdateManyWithoutUsersInput {
  connect: [ResourceSuggestionWhereUniqueInput!]
  disconnect: [ResourceSuggestionWhereUniqueInput!]
  set: [ResourceSuggestionWhereUniqueInput!]
}

input ResourceSuggestionWhereInput {
  ResourceID: ResourceWhereUniqueInput
  id: StringFilter
  priority: IntFilter
  userID: UserWhereUniqueInput
}

input ResourceSuggestionWhereUniqueInput {
  id: String!
}

input ResourceUpdateInput {
  abstract: String
  authors: JSONObject
  historyID: ResourceHistoryUpdateManyWithoutResourcesInput
  imageURL: String
  keywordID: KeywordUpdateManyWithoutResourcesInput
  link: String
  relaseDate: DateTime
  resourceType: EnumResourceResourceType
  suggestionID: ResourceSuggestionUpdateManyWithoutResourcesInput
  title: String
}

input ResourceUpdateManyWithoutKeywordsInput {
  connect: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
}

input ResourceWhereInput {
  abstract: StringFilter
  authors: JsonFilter
  historyID: ResourceHistoryListRelationFilter
  id: StringFilter
  imageURL: StringNullableFilter
  keywordID: KeywordListRelationFilter
  link: StringFilter
  relaseDate: DateTimeFilter
  resourceType: EnumResourceResourceType
  suggestionID: ResourceSuggestionListRelationFilter
  title: StringFilter
}

input ResourceWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Synonym {
  createdAt: DateTime!
  id: String!
  keywordId: Keyword
  name: String!
  updatedAt: DateTime!
}

input SynonymCreateInput {
  keywordId: KeywordWhereUniqueInput!
  name: String!
}

input SynonymCreateNestedManyWithoutKeywordsInput {
  connect: [SynonymWhereUniqueInput!]
}

input SynonymListRelationFilter {
  every: SynonymWhereInput
  none: SynonymWhereInput
  some: SynonymWhereInput
}

input SynonymOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  keywordIdId: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input SynonymUpdateInput {
  keywordId: KeywordWhereUniqueInput
  name: String
}

input SynonymUpdateManyWithoutKeywordsInput {
  connect: [SynonymWhereUniqueInput!]
  disconnect: [SynonymWhereUniqueInput!]
  set: [SynonymWhereUniqueInput!]
}

input SynonymWhereInput {
  id: StringFilter
  keywordId: KeywordWhereUniqueInput
  name: StringFilter
}

input SynonymWhereUniqueInput {
  id: String!
}

type User {
  calendar: JSONObject
  createdAt: DateTime!
  firstName: String
  historyId(orderBy: [ResourceHistoryOrderByInput!], skip: Float, take: Float, where: ResourceHistoryWhereInput): [ResourceHistory!]!
  id: String!
  interestId(orderBy: [KeywordOrderByInput!], skip: Float, take: Float, where: KeywordWhereInput): [Keyword!]!
  lastName: String
  profession: String!
  roles: [String!]!
  suggestionId(orderBy: [ResourceSuggestionOrderByInput!], skip: Float, take: Float, where: ResourceSuggestionWhereInput): [ResourceSuggestion!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  calendar: JSONObject
  firstName: String
  historyID: ResourceHistoryCreateNestedManyWithoutUsersInput
  interestID: KeywordCreateNestedManyWithoutUsersInput
  lastName: String
  password: String!
  profession: String!
  roles: [String!]!
  suggestionID: ResourceSuggestionCreateNestedManyWithoutUsersInput
  username: String!
}

input UserCreateNestedManyWithoutKeywordsInput {
  connect: [UserWhereUniqueInput!]
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  calendar: SortOrder
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  profession: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  calendar: JSONObject
  firstName: String
  historyID: ResourceHistoryUpdateManyWithoutUsersInput
  interestID: KeywordUpdateManyWithoutUsersInput
  lastName: String
  password: String
  profession: String
  roles: [String!]
  suggestionID: ResourceSuggestionUpdateManyWithoutUsersInput
  username: String
}

input UserUpdateManyWithoutKeywordsInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
}

input UserWhereInput {
  calendar: JsonFilter
  firstName: StringNullableFilter
  historyID: ResourceHistoryListRelationFilter
  id: StringFilter
  interestID: KeywordListRelationFilter
  lastName: StringNullableFilter
  profession: StringFilter
  suggestionID: ResourceSuggestionListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
